// Code generated by Kitex v0.3.0. DO NOT EDIT.

package userservice

import (
	"context"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"rentWeb/kitex_gen/userapi"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "userService"
	handlerType := (*userapi.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"getImgCaptcha":  kitex.NewMethodInfo(getImgCaptchaHandler, newUserServiceGetImgCaptchaArgs, newUserServiceGetImgCaptchaResult, false),
		"sendSmsCaptcha": kitex.NewMethodInfo(sendSmsCaptchaHandler, newUserServiceSendSmsCaptchaArgs, newUserServiceSendSmsCaptchaResult, false),
		"registerUser":   kitex.NewMethodInfo(registerUserHandler, newUserServiceRegisterUserArgs, newUserServiceRegisterUserResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "userapi",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.3.0",
		Extra:           extra,
	}
	return svcInfo
}

func getImgCaptchaHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*userapi.UserServiceGetImgCaptchaArgs)
	realResult := result.(*userapi.UserServiceGetImgCaptchaResult)
	success, err := handler.(userapi.UserService).GetImgCaptcha(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceGetImgCaptchaArgs() interface{} {
	return userapi.NewUserServiceGetImgCaptchaArgs()
}

func newUserServiceGetImgCaptchaResult() interface{} {
	return userapi.NewUserServiceGetImgCaptchaResult()
}

func sendSmsCaptchaHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*userapi.UserServiceSendSmsCaptchaArgs)
	realResult := result.(*userapi.UserServiceSendSmsCaptchaResult)
	success, err := handler.(userapi.UserService).SendSmsCaptcha(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceSendSmsCaptchaArgs() interface{} {
	return userapi.NewUserServiceSendSmsCaptchaArgs()
}

func newUserServiceSendSmsCaptchaResult() interface{} {
	return userapi.NewUserServiceSendSmsCaptchaResult()
}

func registerUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*userapi.UserServiceRegisterUserArgs)
	realResult := result.(*userapi.UserServiceRegisterUserResult)
	success, err := handler.(userapi.UserService).RegisterUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceRegisterUserArgs() interface{} {
	return userapi.NewUserServiceRegisterUserArgs()
}

func newUserServiceRegisterUserResult() interface{} {
	return userapi.NewUserServiceRegisterUserResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetImgCaptcha(ctx context.Context, req *userapi.ImgCaptchaRequest) (r *userapi.ImgCaptchaResponse, err error) {
	var _args userapi.UserServiceGetImgCaptchaArgs
	_args.Req = req
	var _result userapi.UserServiceGetImgCaptchaResult
	if err = p.c.Call(ctx, "getImgCaptcha", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SendSmsCaptcha(ctx context.Context, req *userapi.SmsCaptchaRequest) (r *userapi.SmsCaptchaResponse, err error) {
	var _args userapi.UserServiceSendSmsCaptchaArgs
	_args.Req = req
	var _result userapi.UserServiceSendSmsCaptchaResult
	if err = p.c.Call(ctx, "sendSmsCaptcha", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RegisterUser(ctx context.Context, req *userapi.RegisterUserRequest) (r *userapi.RegisterUserResponse, err error) {
	var _args userapi.UserServiceRegisterUserArgs
	_args.Req = req
	var _result userapi.UserServiceRegisterUserResult
	if err = p.c.Call(ctx, "registerUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
